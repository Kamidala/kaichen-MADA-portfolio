---
title: "Module 8 Exercise - Fitting Basic Statistical Models: Part 3"
output: 
  html_document:
      toc: FALSE
---
# Load Cleaned Data and Libraries
```{r}
# Data Handling and Model Building
library(tidyverse)
library(tidymodels)
library(gtsummary)

# Pathing
library(here)
path <- here("fluanalysis", "data", "cleaned_data.rds")

# Load Data
clean_data <- readRDS(path)
```

As mentioned in previous files, BodyTemp acts as the main continuous outcome of interest, and Nausea acts as the main categorical outcome of interest. For model fitting, all variables other than the outcome in question will be used as predictors. This means that in a logistic regression model for nausea, body temperature will be one of the predictors. Additionally, RunnyNose will be treated as the main predictor in the simple regression models.

# Linear Regression Model
## Set Up Linear Regression Engine
```{r}
lm_model <- linear_reg() %>% set_engine("lm")
```

## Runny Nose vs Body Temperature
```{r}
# Tidyverse
tidy(lm_model %>% fit(BodyTemp ~ RunnyNose, data = clean_data))

# Base R
summary(lm(BodyTemp ~ RunnyNose, data = clean_data))
```

## All Relevant Predictors vs Body Temperature
```{r}
# Tidymodels
rmarkdown::paged_table(tidy(lm_model %>% fit(BodyTemp ~ SwollenLymphNodes + ChestCongestion + ChillsSweats + NasalCongestion + CoughYN + Sneeze + Fatigue + SubjectiveFever + Headache + Weakness + WeaknessYN + CoughIntensity + CoughYN2 + Myalgia + MyalgiaYN + RunnyNose + AbPain + ChestPain + Diarrhea + EyePn + Insomnia + ItchyEye + Nausea + EarPn + Hearing + Pharyngitis + Breathless + ToothPn + Vision + Vomit + Wheeze, data = clean_data)))

# Base R
summary(lm(BodyTemp ~ SwollenLymphNodes + ChestCongestion + ChillsSweats + NasalCongestion + CoughYN + Sneeze + Fatigue + SubjectiveFever + Headache + Weakness + WeaknessYN + CoughIntensity + CoughYN2 + Myalgia + MyalgiaYN + RunnyNose + AbPain + ChestPain + Diarrhea + EyePn + Insomnia + ItchyEye + Nausea + EarPn + Hearing + Pharyngitis + Breathless + ToothPn + Vision + Vomit + Wheeze, data = clean_data))
```

## Conclusions 

The output of the models is ordinary in that they relay the same primary information of *summary(lm(...))* in table form. However, I was unpleasantly surprised by the lack of stars next to p-values. For this reason, I prefer the longer-winded *summary(lm(...))* to tidymodels. I will not deny, though, that there may be some instances where the ability to convert such information into a table would be greatly beneficial. The only difference between the two linear regression models built is that one accounts for the multiple predictors that have been inputted, rather than just one.

# Logistic Model

## Set Up Logistic Regression Engine
```{r}
logistic_model <- logistic_reg() %>% set_engine("glm")
```

## Runny Nose vs Nausea
```{r}
# Tidymodels
tidy(logistic_model %>% fit(Nausea ~ RunnyNose, data = clean_data))

# Base R
summary(glm(Nausea ~ RunnyNose, family = binomial, data = clean_data))
```

## All Relevant Predictors vs Nausea
```{r}
# Tidymodels
rmarkdown::paged_table(tidy(logistic_model %>% fit(Nausea ~ SwollenLymphNodes + ChestCongestion + ChillsSweats + NasalCongestion + CoughYN + Sneeze + Fatigue + SubjectiveFever + Headache + Weakness + WeaknessYN + CoughIntensity + CoughYN2 + Myalgia + MyalgiaYN + RunnyNose + AbPain + ChestPain + Diarrhea + EyePn + Insomnia + ItchyEye + EarPn + Hearing + Pharyngitis + Breathless + ToothPn + Vision + Vomit + Wheeze + BodyTemp, data = clean_data)))

# Base R
summary(glm(Nausea ~ SwollenLymphNodes + ChestCongestion + ChillsSweats + NasalCongestion + CoughYN + Sneeze + Fatigue + SubjectiveFever + Headache + Weakness + WeaknessYN + CoughIntensity + CoughYN2 + Myalgia + MyalgiaYN + RunnyNose + AbPain + ChestPain + Diarrhea + EyePn + Insomnia + ItchyEye + EarPn + Hearing + Pharyngitis + Breathless + ToothPn + Vision + Vomit + Wheeze + BodyTemp, family = binomial, data = clean_data))
```

## Conclusions

I reiterate my thoughts from the previous *Conclusions* section under linear regression; I would still prefer manually recoding my variables for a *summary(glm(...))* than use tidymodels, even if model performance between the options offered is the same. However, I have also noticed that *summary()* is not needed for the statistics to be displayed. Instead, that function is already built into *fit()*. Just like the linear regression models, the only difference between the two logistic models built is that one accounts for the multiple predictors that have been inputted, rather than just one.

All in all, while tidymodels would not be my go-to for model fitting, the package has a few functions I would like to keep in mind going forward.